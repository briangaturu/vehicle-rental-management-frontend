import React, { useState, useEffect } from "react";
import { FiEdit } from "react-icons/fi";
import { AiFillDelete } from "react-icons/ai";
import { PuffLoader } from "react-spinners";
import Swal from "sweetalert2";
import { toast, Toaster } from "sonner";

import {
Â  useGetAllVehicleSpecsQuery,
Â  useCreateVehicleSpecMutation,
Â  useUpdateVehicleSpecMutation,
Â  useDeleteVehicleSpecMutation,
Â  type VehicleSpec, 
Â  type CreateVehicleSpecPayload, 
Â  type UpdateVehicleSpecPayload,
} from "../../features/api/vehicleSpecsApi"; 

export const AllVehicleSpecs = () => {
Â  const {
Â  Â  data: vehicleSpecs = [],
Â  Â  error,
Â  Â  isLoading,
Â  Â  refetch,
Â  } = useGetAllVehicleSpecsQuery();
Â  const [createVehicleSpec, { isLoading: isCreating }] = useCreateVehicleSpecMutation();
Â  const [updateVehicleSpec, { isLoading: isUpdating }] = useUpdateVehicleSpecMutation();
Â  const [deleteVehicleSpec, { isLoading: isDeleting }] = useDeleteVehicleSpecMutation();

Â  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
Â  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
Â  const [currentSpec, setCurrentSpec] = useState<VehicleSpec | null>(null);

Â  // State for new spec form - NOW USES 'manufacturer'
Â  const [newSpecForm, setNewSpecForm] = useState<CreateVehicleSpecPayload>({
Â  Â  manufacturer: "", // Changed from 'brand' to 'manufacturer'
Â  Â  model: "",
Â  Â  year: new Date().getFullYear(), // Default to current year
Â  Â  fuelType: "",
Â  Â  engineCapacity: "",
Â  Â  transmission: "",
Â  Â  seatingCapacity: 5, // Default value
Â  Â  color: "",
Â  Â  features: "",
Â  });

Â  // State for edit spec form - NOW USES 'manufacturer'
Â  const [editSpecForm, setEditSpecForm] = useState<UpdateVehicleSpecPayload>({
Â  Â  manufacturer: "", // Changed from 'brand' to 'manufacturer'
Â  Â  model: "",
Â  Â  year: undefined,
Â  Â  fuelType: "",
Â  Â  engineCapacity: "",
Â  Â  transmission: "",
Â  Â  seatingCapacity: undefined,
Â  Â  color: "",
Â  Â  features: "",
Â  });

Â  // Reset add form
Â  const resetAddForm = () => {
Â  Â  setNewSpecForm({
Â  Â  Â  manufacturer: "", // Changed from 'brand' to 'manufacturer'
Â  Â  Â  model: "",
Â  Â  Â  year: new Date().getFullYear(),
Â  Â  Â  fuelType: "",
Â  Â  Â  engineCapacity: "",
Â  Â  Â  transmission: "",
Â  Â  Â  seatingCapacity: 5,
Â  Â  Â  color: "",
Â  Â  Â  features: "",
Â  Â  });
Â  };

Â  useEffect(() => {
Â  Â  if (currentSpec) {
Â  Â  Â  setEditSpecForm({
Â  Â  Â  Â  manufacturer: currentSpec.manufacturer, 
Â  Â  Â  Â  model: currentSpec.model,
Â  Â  Â  Â  year: currentSpec.year,
Â  Â  Â  Â  fuelType: currentSpec.fuelType,
Â  Â  Â  Â  engineCapacity: currentSpec.engineCapacity,
Â  Â  Â  Â  transmission: currentSpec.transmission,
Â  Â  Â  Â  seatingCapacity: currentSpec.seatingCapacity,
Â  Â  Â  Â  color: currentSpec.color,
Â  Â  Â  Â  features: currentSpec.features,
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  // Reset edit form if no spec is selected
Â  Â  Â  setEditSpecForm({
Â  Â  Â  Â  manufacturer: "", // Changed from 'brand' to 'manufacturer'
Â  Â  Â  Â  model: "",
Â  Â  Â  Â  year: undefined,
Â  Â  Â  Â  fuelType: "",
Â  Â  Â  Â  engineCapacity: "",
Â  Â  Â  Â  transmission: "",
Â  Â  Â  Â  seatingCapacity: undefined,
Â  Â  Â  Â  color: "",
Â  Â  Â  Â  features: "",
Â  Â  Â  });
Â  Â  }
Â  }, [currentSpec]);

Â  const handleDelete = (specId: number) => {
Â  Â  Swal.fire({
Â  Â  Â  title: "Are you sure?",
Â  Â  Â  text: "This vehicle specification will be deleted permanently.",
Â  Â  Â  icon: "warning",
Â  Â  Â  showCancelButton: true,
Â  Â  Â  confirmButtonColor: "#d33",
Â  Â  Â  cancelButtonColor: "#3085d6",
Â  Â  Â  confirmButtonText: "Yes, delete it!",
Â  Â  }).then(async (result) => {
Â  Â  Â  if (result.isConfirmed) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  await deleteVehicleSpec(specId).unwrap();
Â  Â  Â  Â  Â  toast.success(`Vehicle Spec ID ${specId} deleted successfully!`);
Â  Â  Â  Â  Â  refetch(); // Refetch all specs after deletion
Â  Â  Â  Â  } catch (err: any) {
Â  Â  Â  Â  Â  console.error("Vehicle spec deletion failed:", err);
Â  Â  Â  Â  Â  toast.error(
Â  Â  Â  Â  Â  Â  typeof err?.data?.error === "string"
Â  Â  Â  Â  Â  Â  Â  ? err.data.error
Â  Â  Â  Â  Â  Â  Â  : "Error deleting vehicle spec"
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  });
Â  };

Â  const handleCreateSpec = async (e: React.FormEvent) => {
Â  Â  e.preventDefault();

Â  Â  // Basic client-side validation for required fields - NOW USES 'manufacturer'
Â  Â  const requiredFields: (keyof CreateVehicleSpecPayload)[] = [
Â  Â  Â  "manufacturer", "model", "year", "fuelType", "engineCapacity",
Â  Â  Â  "transmission", "seatingCapacity", "color", "features"
Â  Â  ];
Â  Â  for (const field of requiredFields) {
Â  Â  Â  if (typeof newSpecForm[field] === 'string' && !newSpecForm[field].trim()) {
Â  Â  Â  Â  toast.error(`Please fill in the '${field}' field.`);
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  if (typeof newSpecForm[field] === 'number' && (newSpecForm[field] === null || newSpecForm[field] === undefined)) {
Â  Â  Â  Â  Â toast.error(`Please fill in the '${field}' field.`);
Â  Â  Â  Â  Â return;
Â  Â  Â  }
Â  Â  }

Â  Â  if (newSpecForm.year <= 1900 || newSpecForm.year > new Date().getFullYear() + 5) { // Allow up to 5 years into the future
Â  Â  Â  toast.error("Please enter a valid year.");
Â  Â  Â  return;
Â  Â  }
Â  Â  if (newSpecForm.seatingCapacity <= 0) {
Â  Â  Â  toast.error("Seating capacity must be a positive number.");
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  // Payload sent to backend now correctly contains 'manufacturer'
Â  Â  Â  await createVehicleSpec(newSpecForm).unwrap();
Â  Â  Â  toast.success("Vehicle Specification added successfully! ðŸŽ‰");
Â  Â  Â  setIsAddModalOpen(false);
Â  Â  Â  resetAddForm();
Â  Â  Â  refetch(); // Refetch all specs after creation
Â  Â  } catch (err: any) {
Â  Â  Â  console.error("Vehicle spec creation failed:", err);
Â  Â  Â  toast.error(
Â  Â  Â  Â  typeof err?.data?.error === "string"
Â  Â  Â  Â  Â  ? err.data.error
Â  Â  Â  Â  Â  : "Error adding vehicle specification"
Â  Â  Â  );
Â  Â  }
Â  };

Â  const handleUpdateSpec = async (e: React.FormEvent) => {
Â  Â  e.preventDefault();

Â  Â  if (!currentSpec?.vehicleSpecId) {
Â  Â  Â  toast.error("No vehicle specification selected for update.");
Â  Â  Â  return;
Â  Â  }

Â  Â  // Filter out undefined/empty string fields from editSpecForm to send partial update
Â  Â  // Ensure 'manufacturer' is correctly handled here
Â  Â  const dataToUpdate: UpdateVehicleSpecPayload = Object.fromEntries(
Â  Â  Â  Object.entries(editSpecForm).filter(([_, value]) => value !== undefined && (typeof value === 'string' ? value.trim() !== '' : true))
Â  Â  ) as UpdateVehicleSpecPayload;

Â  Â  if (Object.keys(dataToUpdate).length === 0) {
Â  Â  Â  toast.error("No changes detected to update.");
Â  Â  Â  return;
Â  Â  }

Â  Â  if (dataToUpdate.year !== undefined && (dataToUpdate.year <= 1900 || dataToUpdate.year > new Date().getFullYear() + 5)) {
Â  Â  Â  toast.error("Please enter a valid year.");
Â  Â  Â  return;
Â  Â  }
Â  Â  if (dataToUpdate.seatingCapacity !== undefined && dataToUpdate.seatingCapacity <= 0) {
Â  Â  Â  toast.error("Seating capacity must be a positive number.");
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  // Payload sent to backend now correctly contains 'manufacturer'
Â  Â  Â  await updateVehicleSpec({ id: currentSpec.vehicleSpecId, data: dataToUpdate }).unwrap();
Â  Â  Â  toast.success(`Vehicle Spec ID ${currentSpec.vehicleSpecId} updated successfully! âœ…`);
Â  Â  Â  setIsEditModalOpen(false);
Â  Â  Â  setCurrentSpec(null);
Â  Â  Â  refetch(); // Refetch all specs after update
Â  Â  } catch (err: any) {
Â  Â  Â  console.error("Vehicle spec update failed:", err);
Â  Â  Â  toast.error(
Â  Â  Â  Â  typeof err?.data?.error === "string"
Â  Â  Â  Â  Â  ? err.data.error
Â  Â  Â  Â  Â  : "Error updating vehicle specification"
Â  Â  Â  );
Â  Â  }
Â  };

Â  const openEditModal = (spec: VehicleSpec) => {
Â  Â  setCurrentSpec(spec);
Â  Â  setIsEditModalOpen(true);
Â  };

Â  const closeEditModal = () => {
Â  Â  setIsEditModalOpen(false);
Â  Â  setCurrentSpec(null);
Â  Â  // Ensure this reset matches the types
Â  Â  setEditSpecForm({
Â  Â  Â  manufacturer: "", // Ensure manufacturer is cleared
Â  Â  Â  model: "",
Â  Â  Â  year: undefined,
Â  Â  Â  fuelType: "",
Â  Â  Â  engineCapacity: "",
Â  Â  Â  transmission: "",
Â  Â  Â  seatingCapacity: undefined,
Â  Â  Â  color: "",
Â  Â  Â  features: "",
Â  Â  });
Â  };

Â  const fuelTypeOptions = ["Petrol", "Diesel", "Electric", "Hybrid"];
Â  const transmissionOptions = ["Manual", "Automatic"];

Â  return (
Â  Â  <>
Â  Â  Â  <Toaster richColors position="top-right" />
Â  Â  Â  <div className="bg-white border border-gray-200 shadow-md rounded-md p-6 mt-6">
Â  Â  Â  Â  <div className="flex justify-between items-center mb-6">
Â  Â  Â  Â  Â  <h1 className="text-2xl font-bold text-blue-950">All Vehicle Specifications</h1>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  setIsAddModalOpen(true);
Â  Â  Â  Â  Â  Â  Â  resetAddForm();
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  className="bg-blue-900 text-white px-4 py-2 rounded hover:bg-blue-800"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  + Add New Spec
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  <p className="text-red-600 font-semibold text-center">
Â  Â  Â  Â  Â  Â  Error occurred while fetching vehicle specifications.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  <div className="flex justify-center">
Â  Â  Â  Â  Â  Â  <PuffLoader color="#1e3a8a" />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  ) : vehicleSpecs.length === 0 ? (
Â  Â  Â  Â  Â  <p className="text-gray-600 font-semibold text-center">
Â  Â  Â  Â  Â  Â  No vehicle specifications found.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <div className="overflow-x-auto">
Â  Â  Â  Â  Â  Â  <table className="min-w-full bg-white border border-gray-300 rounded-lg shadow-sm">
Â  Â  Â  Â  Â  Â  Â  <thead className="bg-blue-950 text-orange-400">
Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">ID</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Manufacturer</th> {/* Changed from 'Brand' to 'Manufacturer' */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Model</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Year</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Color</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Fuel Type</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Engine</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Transmission</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Seats</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Features</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <th className="p-3 text-left">Actions</th>
Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  {vehicleSpecs.map((spec) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={spec.vehicleSpecId} className="hover:bg-blue-50 border-t">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.vehicleSpecId}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.manufacturer}</td> {/* Display spec.manufacturer */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.model}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.year}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.color}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.fuelType}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.engineCapacity}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.transmission}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3">{spec.seatingCapacity}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3 truncate" title={spec.features}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {spec.features}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-3 flex gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-blue-700 hover:bg-blue-100 p-1 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => openEditModal(spec)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <FiEdit />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-red-600 hover:bg-red-100 p-1 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleDelete(spec.vehicleSpecId)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isDeleting}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AiFillDelete />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  {/* Add Vehicle Spec Modal */}
Â  Â  Â  {isAddModalOpen && (
Â  Â  Â  Â  <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
Â  Â  Â  Â  Â  <div className="bg-white rounded-lg p-6 w-[600px] max-h-[90vh] overflow-y-auto shadow-xl">
Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold mb-4 text-blue-900">Add New Vehicle Specification</h2>
Â  Â  Â  Â  Â  Â  <form onSubmit={handleCreateSpec} className="grid grid-cols-2 gap-4">
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Manufacturer" // Changed from 'Brand' to 'Manufacturer'
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.manufacturer}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, manufacturer: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Model"
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.model}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, model: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Year"
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.year}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, year: Number(e.target.value) })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Color"
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.color}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, color: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.fuelType}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, fuelType: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Fuel Type</option>
Â  Â  Â  Â  Â  Â  Â  Â  {fuelTypeOptions.map(option => <option key={option} value={option}>{option}</option>)}
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Engine Capacity (e.g., 2.0L)"
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.engineCapacity}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, engineCapacity: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.transmission}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, transmission: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Transmission</option>
Â  Â  Â  Â  Â  Â  Â  Â  {transmissionOptions.map(option => <option key={option} value={option}>{option}</option>)}
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Seating Capacity"
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.seatingCapacity}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, seatingCapacity: Number(e.target.value) })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Features (comma-separated)"
Â  Â  Â  Â  Â  Â  Â  Â  value={newSpecForm.features}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewSpecForm({ ...newSpecForm, features: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded col-span-2"
Â  Â  Â  Â  Â  Â  Â  Â  rows={3}
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  <div className="mt-6 flex justify-end gap-4 col-span-2">
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setIsAddModalOpen(false)}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isCreating}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-blue-900 text-white rounded hover:bg-blue-800 disabled:opacity-50"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {isCreating ? "Saving..." : "Add Spec"}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {/* Edit Vehicle Spec Modal */}
Â  Â  Â  {isEditModalOpen && currentSpec && (
Â  Â  Â  Â  <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
Â  Â  Â  Â  Â  <div className="bg-white rounded-lg p-6 w-[600px] max-h-[90vh] overflow-y-auto shadow-xl">
Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold mb-4 text-blue-900">Edit Vehicle Specification (ID: {currentSpec.vehicleSpecId})</h2>
Â  Â  Â  Â  Â  Â  <form onSubmit={handleUpdateSpec} className="grid grid-cols-2 gap-4">
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Manufacturer" // Changed from 'Brand' to 'Manufacturer'
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.manufacturer || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, manufacturer: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Model"
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.model || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, model: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Year"
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.year || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, year: Number(e.target.value) })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Color"
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.color || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, color: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.fuelType || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, fuelType: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Fuel Type</option>
Â  Â  Â  Â  Â  Â  Â  Â  {fuelTypeOptions.map(option => <option key={option} value={option}>{option}</option>)}
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Engine Capacity (e.g., 2.0L)"
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.engineCapacity || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, engineCapacity: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.transmission || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, transmission: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select Transmission</option>
Â  Â  Â  Â  Â  Â  Â  Â  {transmissionOptions.map(option => <option key={option} value={option}>{option}</option>)}
Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Seating Capacity"
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.seatingCapacity || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, seatingCapacity: Number(e.target.value) })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Features (comma-separated)"
Â  Â  Â  Â  Â  Â  Â  Â  value={editSpecForm.features || ''}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setEditSpecForm({ ...editSpecForm, features: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  className="border p-2 rounded col-span-2"
Â  Â  Â  Â  Â  Â  Â  Â  rows={3}
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  <div className="mt-6 flex justify-end gap-4 col-span-2">
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={closeEditModal}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isUpdating}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-blue-900 text-white rounded hover:bg-blue-800 disabled:opacity-50"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {isUpdating ? "Updating..." : "Update Spec"}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </>
Â  );
};

export default AllVehicleSpecs;