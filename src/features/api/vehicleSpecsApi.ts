// src/features/api/vehicleSpecsApi.ts

import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { apiDomain } from '../../proxxy'; 
import type { RootState } from '../../app/store'; 


export interface VehicleSpec {
  vehicleSpecId: number;
  model: string;
  manufacturer: string; // ✅ CHANGED from 'brand' to 'manufacturer'
  color: string;
  year: number;
  fuelType: string;
  engineCapacity: string;
  transmission: string;
  seatingCapacity: number;
  features: string;
  createdAt?: string;
  updatedAt?: string;
}

// Payload for creating a new vehicle specification
// Note: vehicleSpecId is auto-generated by the DB, so it's not in the insert payload
export interface CreateVehicleSpecPayload {
  model: string;
  manufacturer: string; // ✅ CHANGED from 'brand' to 'manufacturer'
  color: string;
  year: number;
  fuelType: string;
  engineCapacity: string;
  transmission: string;
  seatingCapacity: number;
  features: string;
}

// Payload for updating an existing vehicle specification
// All fields are optional for partial updates
export interface UpdateVehicleSpecPayload {
  model?: string;
  manufacturer?: string; // ✅ CHANGED from 'brand' to 'manufacturer'
  color?: string;
  year?: number;
  fuelType?: string;
  engineCapacity?: string;
  transmission?: string;
  seatingCapacity?: number;
  features?: string;
}

export const vehicleSpecsApi = createApi({
  reducerPath: 'vehicleSpecsApi', // Unique reducer path
  baseQuery: fetchBaseQuery({
    baseUrl: apiDomain, // Use your defined API domain
    prepareHeaders: (headers, { getState }) => {
      const token = (getState() as RootState).auth.token; // Get token from Redux store
      if (token) {
        headers.set('Authorization', `${token}`);
      }
      headers.set('Content-Type', 'application/json');
      return headers;
    },
  }),
  tagTypes: ['VehicleSpecs'], // Define a tag type for caching and invalidation

  endpoints: (builder) => ({
    // Query to get all vehicle specifications
    getAllVehicleSpecs: builder.query<VehicleSpec[], void>({
      query: () => 'vehicleSpecs', // Matches backend route: GET /api/vehicleSpecs
      providesTags: ['VehicleSpecs'],
    }),

    // Query to get a vehicle specification by ID
    getVehicleSpecById: builder.query<VehicleSpec, number>({
      query: (id) => `vehicleSpecs/${id}`, // Matches backend route: GET /api/vehicleSpecs/:id
      providesTags: (result, error, id) => [{ type: 'VehicleSpecs', id }],
    }),

    // Query to get vehicle specifications by manufacturer (brand)
    // The query parameter explicitly remains 'manufacturer' as this matches the backend search route
    getVehicleSpecsByManufacturer: builder.query<VehicleSpec[], string>({
      query: (manufacturer) => `vehicleSpecs-search?manufacturer=${manufacturer}`, // Matches backend route: GET /api/vehicleSpecs-search?manufacturer=...
      providesTags: (result, error, manufacturer) => [{ type: 'VehicleSpecs', id: 'LIST' }], // Tag list for search results
    }),

    // Mutation to create a new vehicle specification
    createVehicleSpec: builder.mutation<VehicleSpec, CreateVehicleSpecPayload>({
      query: (newSpec) => ({
        url: 'vehicleSpecs', // Matches backend route: POST /api/vehicleSpecs
        method: 'POST',
        body: newSpec,
      }),
      invalidatesTags: ['VehicleSpecs'], // Invalidate list after creation
    }),

    // Mutation to update an existing vehicle specification
    updateVehicleSpec: builder.mutation<VehicleSpec, { id: number; data: UpdateVehicleSpecPayload }>({
      query: ({ id, data }) => ({
        url: `vehicleSpecs/${id}`, // Matches backend route: PUT /api/vehicleSpecs/:id
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: (result, error, arg) => [{ type: 'VehicleSpecs', id: arg.id }, 'VehicleSpecs'], // Invalidate specific item and list
    }),

    // Mutation to delete a vehicle specification
    deleteVehicleSpec: builder.mutation<{ message: string }, number>({
      query: (id) => ({
        url: `vehicleSpecs/${id}`, // Matches backend route: DELETE /api/vehicleSpecs/:id
        method: 'DELETE',
      }),
      invalidatesTags: ['VehicleSpecs'], // Invalidate list after deletion
    }),
  }),
});

// Export the auto-generated hooks
export const {
  useGetAllVehicleSpecsQuery,
  useGetVehicleSpecByIdQuery,
  useGetVehicleSpecsByManufacturerQuery,
  useCreateVehicleSpecMutation,
  useUpdateVehicleSpecMutation,
  useDeleteVehicleSpecMutation,
} = vehicleSpecsApi;

export default vehicleSpecsApi;